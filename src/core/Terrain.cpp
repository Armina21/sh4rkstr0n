#include "Terrain.h"

//terrain avec bordures 
const char Terrain1[36][64] = {
    "###############################################################",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "#.............................................................#",
    "###############################################################"
};

//terrain sans bordures 
const char Terrain2[36][64] = {
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "...............................................................",
    "..............................................................."
};



Terrain::Terrain() {
	m_dimx = 63;
    m_dimy = 36;
    for(int x=0;x<m_dimx;++x)
	    for(int y=0;y<m_dimy;++y)
    	{
	    	switch(Terrain1[m_dimy-1-y][x])
	    	{
		    	case '#':
                    ter[x][y] = MUR;
                    break;
                case '.':
                    ter[x][y] = VIDE;
                    break;
                case 'I': 
                    ter[x][y] = INVINCIBLE; 
                    break;
                case 'R': 
                    ter[x][y] = RALENTI; 
                    break; 
                case 'S': 
                    ter[x][y] = STOP; 
                    break; 
            }
	    }
}


//affiche le terrain 1 ou le terrain 2 en fonction 
//d'un booléen 
void Terrain::cleanTerrain(bool terrain) 
{
    if (terrain == true) {
        for (int x = 0; x < m_dimx; ++x) {
            for (int y = 0; y < m_dimy; ++y) {
                char t = Terrain1[y][x]; 
                switch (t) {
                    case '#': ter[x][y] = MUR; break;
                    case '.': ter[x][y] = VIDE; break;
                    case 'I': ter[x][y] = INVINCIBLE; break;
                    case 'R': ter[x][y] = RALENTI; break; 
                    case 'S': ter[x][y] = STOP; break;
                    default: ter[x][y] = VIDE; break; // les caractères qui n'auraient rien à faire ici
                }
            }
        }
    }
    else {
        for (int x = 0; x < m_dimx; ++x) {
            for (int y = 0; y < m_dimy; ++y) {
                char t = Terrain2[y][x]; 
                switch (t) {
                    case '.': ter[x][y] = VIDE; break;
                    case 'I': ter[x][y] = INVINCIBLE; break;
                    case 'R': ter[x][y] = RALENTI; break; 
                    case 'S': ter[x][y] = STOP; break;
                    default: ter[x][y] = VIDE; break; // les caractères qui n'auraient rien à faire ici
                }
            }
        }
    }
}



//retourne vrai quand la position d'un joueur est valide 
bool Terrain::estPositionValide (const vec2D v, bool inv) const {
    if (inv == false)
	    return ((v.x>=0) && (v.x<m_dimx) && (v.y>=0) && (v.y<m_dimy) && (ter[int(v.x)][int(v.y)]!=MUR) && (ter[int(v.x)][int(v.y)]!=J1) && (ter[int(v.x)][int(v.y)]!=J2));
    //cas ou le joueur est invincible 
    else 
        return ((v.x>=0) && (v.x<m_dimx) && (v.y>=0) && (v.y<m_dimy) && (ter[int(v.x)][int(v.y)]!=MUR)) ;
}


IDCase Terrain::getXY (const vec2D v) const 
{
    return ter[int(v.x)][int(v.y)] ; 
}

void Terrain::setXY (const vec2D p, IDCase c) 
{
    ter[int(p.x)][int(p.y)] = c ; 
}

void Terrain::laisserTrace (const vec2D p, const IDCase c) {
	assert(p.x>=-1);
	assert(p.y>=0-1);
	assert(p.x<m_dimx+1);
	assert(p.y<m_dimy+1);
	ter[int(p.x)][int(p.y)]=c;
}

void Terrain::testRegression ()
{
    Terrain t;
    assert(t.getDimX() == 64);
    assert(t.getDimY() == 36);

    t.setXY(vec2D(20,2), J1);
    assert(t.getXY(vec2D(20,2)) == J1);

    bool test;
    test = t.estPositionValide(vec2D(10,5), false);
    assert(test == true);
    test = t.estPositionValide(vec2D(70,80), false);
    assert(test == false);

    /*Terrain t2;
    t.cleanTerrain();
    assert(t == t2);*/

}